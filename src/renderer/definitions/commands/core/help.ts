// file: src/renderer/src/definitions/commands/core/help.ts
import { CommandArg, CommandDefinition } from "../types";
import { coreCommands } from "@/renderer/definitions/commands/core/index.ts";

// Note: In the future, this could be dynamically generated by the command loader.

const HELP_PAD_WIDTH = 28;

export const helpCommand: CommandDefinition = {
  name: "help",
  description: "Displays a list of available commands.",
  soundBlueprint: {
    sources: [{ type: "oscillator", oscillatorType: "sine", frequency: 440 }],
    envelope: { attack: 0.01, decay: 0.1, sustain: 0.2, release: 0.1 },
    duration: 0.4
  },
  execute: (args = []) => {
    let helpText = "Available commands:";
    let commands = coreCommands;

    if (args.length > 0) {
      const targetCommand = args[0].toLowerCase();
      const foundCommand = commands.find((cmd) => cmd.name === targetCommand);
      if (foundCommand) {
        helpText = `Help for command: ${foundCommand.name}`;
        commands = [foundCommand];
      } else {
        return { output: `Command not found: ${targetCommand}` };
      }
    }

    for (const command of commands) {
      helpText += `\n\n  ${command.name.padEnd(HELP_PAD_WIDTH - 2)}${command.description}`;

      if (command.argSet) {
        command.argSet.forEach((arg) => {
          helpText += `\n${mapHelpArg(arg, 2)}`;
        });
      }
    }

    return {
      output: helpText
    };
  },
  argSet: []
};

function mapHelpArg(arg: CommandArg, depth = 1): string {
  if (typeof arg === "string") return arg;
  if (depth >= 5) return "`" + (arg.placeholder ?? arg) + "`";

  const indent = "  ".repeat(depth);
  let argDisplay = "";

  if (arg.flag || arg.placeholder) {
    argDisplay = [
      ...(arg.flag ? [arg.flag] : []),
      ...(arg.placeholder ? [`<${arg.placeholder}>`] : [])
    ].join(" ");
  } else if (arg.literal) {
    argDisplay = arg.literal;
  }

  let line = `${indent}${argDisplay.padEnd(HELP_PAD_WIDTH - indent.length)}`;

  if (arg.description) {
    line += arg.description;
  }

  if (arg.args) {
    const subArgs = arg.args.map((a) => mapHelpArg(a, depth + 1)).join("\n");
    line += `\n${subArgs}`;
  }

  return line;
}
